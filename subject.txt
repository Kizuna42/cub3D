以下は、提供されたPDFファイルからプロジェクトの重要な要件を文字起こししたものです。

-----

[cite\_start]**Summary:** This project is inspired by the world-famous Wolfenstein 3D game, which is considered the first FPS ever created.  [cite\_start]It will enable you to explore ray-casting.  [cite\_start]Your goal will be to make a dynamic view inside a maze, where you will have to find your way. 

**Chapter II Goals**
[cite\_start]This project's objectives are similar to all this first year's objectives: rigor, use of C, basic algorithms, information research, etc. 
[cite\_start]As a graphic design project, cub3D will enable you to improve your skills in these areas: windows, colors, events, fill shapes, etc. 
[cite\_start]In conclusion, cub3D is a remarkable playground to explore the playful practical applications of mathematics without having to understand the specifics.  [cite\_start]With the help of numerous documents available on the internet, you will use mathematics as a tool to create elegant and efficient algorithms. 

**Chapter III Common Instructions**

  * [cite\_start]Your project must be written in C. 
  * [cite\_start]Your project must be written in accordance with the Norm. [cite: 18] [cite\_start]If you have bonus files/functions, they are included in the norm check, and you will receive a 0 if there is a norm error. [cite: 18]
  * [cite\_start]Your functions should not quit unexpectedly (segmentation fault, bus error, double free, etc.) except for undefined behavior. [cite: 19] [cite\_start]If this occurs, your project will be considered non-functional and will receive a 0 during the evaluation. [cite: 20]
  * [cite\_start]All heap-allocated memory must be properly freed when necessary. [cite: 21] [cite\_start]Memory leaks will not be tolerated. [cite: 21]
  * [cite\_start]If the subject requires it, you must submit a Makefile that compiles your source files to the required output with the flags -Wall, Wextra, and Werror, using cc. [cite: 22] [cite\_start]Additionally, your Makefile must not perform unnecessary relinking. [cite: 23]
  * [cite\_start]Your Makefile must contain at least the rules $(NAME), all, clean, fclean and re. [cite: 24]
  * [cite\_start]To submit bonuses for your project, you must include a bonus rule in your Makefile, which will add all the various headers, libraries, or functions that are not allowed in the main part of the project. [cite: 25] Bonuses must be placed in \_bonus. [cite\_start]$[c/h]$ files, unless the subject specifies otherwise. [cite: 25] [cite\_start]The evaluation of mandatory and bonus parts is conducted separately. [cite: 26]
  * [cite\_start]If your project allows you to use your libft, you must copy its sources and its associated Makefile into a libft folder.  [cite\_start]Your project's Makefile must compile the library by using its Makefile, then compile the project. [cite: 28]
  * [cite\_start]We encourage you to create test programs for your project, even though this work does not need to be submitted and will not be graded. [cite: 29] [cite\_start]It will give you an opportunity to easily test your work and your peers' work. [cite: 30] [cite\_start]You will find these tests especially useful during your defence. [cite: 31] [cite\_start]Indeed, during defence, you are free to use your tests and/or the tests of the peer you are evaluating. [cite: 32]
  * [cite\_start]Submit your work to the assigned Git repository. [cite: 33] [cite\_start]Only the work in the Git repository will be graded. [cite: 33] [cite\_start]If Deepthought is assigned to grade your work, it will occur after your peer-evaluations. [cite: 35] [cite\_start]If an error happens in any section of your work during Deepthought's grading, the evaluation will stop. [cite: 35]

**Chapter IV Mandatory part - cub3D**

| Program name | cub3D |
|---|---|
| Turn in files | All your files |
| Makefile | all, clean, fclean, re, bonus |
| Arguments | a map in format \*.cub |
| External functs. [cite\_start]| open, close, read, write, printf, malloc, free, perror, strerror, exit, gettimeofday. [cite: 38] [cite\_start]• All functions of the math library (-lm man man 3 math). [cite: 38] [cite\_start]• All functions of the MinilibX library. [cite: 38] |
| Libft authorized | [cite\_start]Yes [cite: 38] |
| Description | [cite\_start]You must create a "realistic" 3D graphical representation of the inside of a maze from a first-person perspective. [cite: 38] [cite\_start]You have to create this representation using the ray-casting principles mentioned earlier. [cite: 38] |

The constraints are as follows:

  * [cite\_start]You must use the miniLibX. [cite: 39] [cite\_start]Either the version that is available on the operating system, or from its sources. [cite: 40] [cite\_start]If you choose to work with the sources, you will need to apply the same rules for your libft as those written above in Common Instructions part. [cite: 41]
  * [cite\_start]The management of your window must remain smooth: changing to another window, minimizing, etc. [cite: 42]
  * [cite\_start]Display different wall textures (the choice is yours) that vary depending on which side the wall is facing (North, South, East, West). [cite: 43]
  * [cite\_start]Your program must be able to set the floor and ceiling colors to two different ones. [cite: 44]
  * [cite\_start]The program displays the image in a window and respects the following rules: [cite: 45]
      * [cite\_start]The left and right arrow keys of the keyboard must allow you to look left and right in the maze. [cite: 46]
      * [cite\_start]The W, A, S, and D keys must allow you to move the point of view through the maze. [cite: 47]
      * [cite\_start]Pressing ESC must close the window and quit the program cleanly. [cite: 48]
      * [cite\_start]Clicking on the red cross on the window's frame must close the window and quit the program cleanly. [cite: 49]
  * [cite\_start]The use of images of the minilibX library is strongly recommended. [cite: 50]
  * [cite\_start]Your program must take as a first argument a scene description file with the cub extension. [cite: 51]
  * [cite\_start]The map must be composed of only 6 possible characters: 0 for an empty space, 1 for a wall, and N,S,E or W for the player's start position and spawning orientation. [cite: 52] [cite\_start]This is a simple valid map: [cite: 52]
    ```
    111111
    100101
    101001
    1100N1
    111111
    ```
  * [cite\_start]The map must be closed/surrounded by walls, if not the program must return an error. [cite: 53]
  * [cite\_start]Except for the map content, each type of element can be separated by one or more empty lines. [cite: 54]
  * [cite\_start]Except for the map content which always has to be the last, each type of element can be set in any order in the file. [cite: 55]
  * [cite\_start]Except for the map, each type of information from an element can be separated by one or more spaces. [cite: 56]
  * [cite\_start]The map must be parsed as it looks in the file. [cite: 57] [cite\_start]Spaces are a valid part of the map and are up to you to handle. [cite: 58] [cite\_start]You must be able to parse any kind of map, as long as it respects the rules of the map. [cite: 59]
  * [cite\_start]Except for the map, each element must begin with its type identifier (composed by one or two characters), followed by its specific information in a strict order: [cite: 60]
      * [cite\_start]North texture: `NO ./path_to_the_north_texture` [cite: 60]
          * [cite\_start]identifier: NO [cite: 60]
          * [cite\_start]path to the north texture [cite: 60]
      * [cite\_start]South texture: `SO ./path_to_the_south_texture` [cite: 60]
          * [cite\_start]identifier: SO [cite: 60]
          * [cite\_start]path to the south texture [cite: 60]
      * [cite\_start]West texture: `WE ./path_to_the_west_texture` [cite: 60]
          * [cite\_start]identifier: WE [cite: 60]
          * [cite\_start]path to the west texture [cite: 60]
      * [cite\_start]East texture: `EA ./path_to_the_east_texture` [cite: 60]
          * [cite\_start]identifier: EA [cite: 60]
          * [cite\_start]path to the east texture [cite: 60]
      * [cite\_start]Floor color: `F 220,100,0` [cite: 60]
          * [cite\_start]identifier: F [cite: 60]
          * [cite\_start]R,G,B colors in range [0,255]: 0, 255, 255 [cite: 60]
      * [cite\_start]Ceiling color: `C 225,30,0` [cite: 61]
          * [cite\_start]identifier: C [cite: 61]
          * [cite\_start]R,G,B colors in range [0,255]: 0, 255, 255 [cite: 61]
  * [cite\_start]If any misconfiguration of any kind is encountered in the file, the program must exit properly and return "Error\\n" followed by an explicit error message of your choice. [cite: 62]

**Chapter V Bonus part**
[cite\_start]Bonuses will be evaluated only if your mandatory part is perfect. [cite: 63] [cite\_start]By perfect we naturally mean that it needs to be complete, that it cannot fail, even in cases of nasty mistakes such as incorrect usage, etc. [cite: 64] [cite\_start]It means that if your mandatory part does not obtain ALL the points during the grading, your bonuses will be entirely IGNORED. [cite: 64]
[cite\_start]Bonus list: [cite: 65]

  * [cite\_start]Wall collisions. [cite: 65]
  * [cite\_start]A minimap system. [cite: 65]
  * [cite\_start]Doors which can open and close. [cite: 65]
  * [cite\_start]Animated sprites. [cite: 65]
  * [cite\_start]Rotate the point of view with the mouse. [cite: 66]
    [cite\_start]You are allowed to use other functions or add symbols on the map to complete the bonus part as long as their use is justified during your evaluation. [cite: 67] [cite\_start]You are also allowed to modify the expected scene file format to fit your needs. [cite: 68]

**Chapter VII Submission and peer-evaluation**
[cite\_start]Submit your assignment to your Git repository as usual. [cite: 75] [cite\_start]Only the work inside your repository will be evaluated during the defense. [cite: 76] [cite\_start]Don’t hesitate to double check the names of your files to ensure they are correct. [cite: 77]