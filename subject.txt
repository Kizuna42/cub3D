Summary:
This project is inspired by the world-famous Wolfenstein 3D game, which is considered the first FPS ever created. It will enable you to explore ray-casting. Your goal will be to make a dynamic view inside a maze, where you will have to find your way.

⸻

Chapter II Goals
This project’s objectives are similar to all this first year’s objectives: rigor, use of C, basic algorithms, information research, etc.
As a graphic design project, cub3D will enable you to improve your skills in these areas: windows, colors, events, fill shapes, etc.
In conclusion, cub3D is a remarkable playground to explore the playful practical applications of mathematics without having to understand the specifics.
With the help of numerous documents available on the internet, you will use mathematics as a tool to create elegant and efficient algorithms.

⸻

Chapter IV Mandatory part - cub3D

Program name	cub3D
Turn in files	All your files
Makefile	all, clean, fclean, re, bonus
Arguments	a map in format *.cub
External functs.	open, close, read, write, printf, malloc, free, perror, strerror, exit, gettimeofday. All functions of the math library (-lm), All functions of the MinilibX library
Libft authorized	Yes
Description	You must create a “realistic” 3D graphical representation of the inside of a maze from a first-person perspective. You have to create this representation using the ray-casting principles mentioned earlier.

The constraints are as follows:
	•	You must use the miniLibX.
Either the version that is available on the operating system, or from its sources.
If you choose to work with the sources, you will need to apply the same rules for your libft as those written above in Common Instructions part.
	•	The management of your window must remain smooth: changing to another window, minimizing, etc.
	•	Display different wall textures (the choice is yours) that vary depending on which side the wall is facing (North, South, East, West).
	•	Your program must be able to set the floor and ceiling colors to two different ones.
	•	The program displays the image in a window and respects the following rules:
	•	The left and right arrow keys of the keyboard must allow you to look left and right in the maze.
	•	The W, A, S, and D keys must allow you to move the point of view through the maze.
	•	Pressing ESC must close the window and quit the program cleanly.
	•	Clicking on the red cross on the window’s frame must close the window and quit the program cleanly.
	•	The use of images of the minilibX library is strongly recommended.
	•	Your program must take as a first argument a scene description file with the .cub extension.
	•	The map must be composed of only 6 possible characters:
	•	0 for an empty space
	•	1 for a wall
	•	N, S, E or W for the player’s start position and spawning orientation.

111111
100101
101001
1100N1
111111


	•	The map must be closed/surrounded by walls, if not the program must return an error.
	•	Except for the map content, each type of element can be separated by one or more empty lines.
	•	Except for the map content which always has to be the last, each type of element can be set in any order in the file.
	•	Except for the map, each type of information from an element can be separated by one or more spaces.
	•	The map must be parsed as it looks in the file.
Spaces are a valid part of the map and are up to you to handle.
You must be able to parse any kind of map, as long as it respects the rules of the map.
	•	Except for the map, each element must begin with its type identifier (composed by one or two characters), followed by its specific information in a strict order:
	•	North texture: NO ./path_to_the_north_texture
	•	South texture: SO ./path_to_the_south_texture
	•	West texture: WE ./path_to_the_west_texture
	•	East texture: EA ./path_to_the_east_texture
	•	Floor color: F 220,100,0
	•	Ceiling color: C 225,30,0
	•	If any misconfiguration of any kind is encountered in the file, the program must exit properly and return "Error\n" followed by an explicit error message of your choice.

⸻

Chapter V Bonus part
Bonuses will be evaluated only if your mandatory part is perfect.
By perfect we naturally mean that it needs to be complete, that it cannot fail, even in cases of nasty mistakes such as incorrect usage, etc.
It means that if your mandatory part does not obtain ALL the points during the grading, your bonuses will be entirely IGNORED.

Bonus list:
	•	Wall collisions
	•	A minimap system
	•	Doors which can open and close
	•	Animated sprites
	•	Rotate the point of view with the mouse

You are allowed to use other functions or add symbols on the map to complete the bonus part as long as their use is justified during your evaluation.
You are also allowed to modify the expected scene file format to fit your needs.

⸻

Chapter VII Submission and peer-evaluation
Submit your assignment to your Git repository as usual.
Only the work inside your repository will be evaluated during the defense.
Don’t hesitate to double check the names of your files…

⸻